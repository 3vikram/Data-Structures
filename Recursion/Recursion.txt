Recursion:

Properties of Recursion:

1. Same operation performed multiple times with different input values
2. In every step we try to make the problem smaller
3. We mandatorily need to have a base condition, which tells the system when to stop

Reasons to learn recursion:

1. Recursion is prefered over iteration when a given problem can be broken down to a similar small or sub problem
2. In Tree and graph algorithms recursion is mostly used to solve problems

Format of a recursive function:

1. Recursive case - Case where the function should recall itself
2. Base case - Case where the function does not need to recall itself (termination condition)

Example:

SampleRecursion (parameter) {
  if (base case is satisfied) {
    return some base case value
  else
    SampleRecursion (modified parameter)
  }
}

How Recursion works internally at stack memory?

Refer "Recursion.png" under "Recursion" folder

Algorithm Run time analysis:

Recursion is said to have no time and space efficient but it is said to have ease of code (solving small similar sub problems)

Iteration is said to have both time and space efficient but implementation or ease of code is complex

When to use recursion?

>> When we can breakdown a problem to a similar sub problem
>> When we are fine with the extra overhead with time and space complexity
>> When in need of quick solution than a efficient solution

When to not use recursion?

>> If the answer is no to any of the above 3 use of recursion then this is not recommended

Use cases of recursion?

>> Stack
>> Tree (Traversing/ searching/ insert and delete)
>> Sorting (Quick sort and Merge sort)
>> Divide and conqer (Braking problem into similar sub problems)
